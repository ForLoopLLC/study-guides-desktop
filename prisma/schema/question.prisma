model Question {
  id                String        @id @default(cuid())
  batchId           String?
  batch             ImportBatch?   @relation(fields: [batchId], references: [id], onDelete: Cascade)
  questionText      String
  answerText        String
  hash              String        @unique
  learnMore         String        
  distractors       String[]      @default([])
  videoUrl          String?
  imageUrl          String?
  version           Int           @default(1)
  survivalQuestion  SurvivalQuestion[]
  testQuestion      TestQuestion[]
  tags              QuestionTag[]
  interactions      UserQuestionInteraction[]
  ratings           UserQuestionRating[]
  reports           UserQuestionReport[]
  topicProgress     UserTopicProgress[]
  public            Boolean       @default(true)
  accessList        QuestionAccess[]
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt  

  @@map("Question")
  @@index([batchId])
  @@index([hash], name: "questions_hash_idx")
  @@index([distractors], type: Gin)
  @@index([questionText])
}

model QuestionTag {
  questionId  String          
  tagId       String          
  batchId     String?
  batch       ImportBatch?    @relation(fields: [batchId], references: [id], onDelete: Cascade)
  question    Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag         Tag             @relation(fields: [tagId], references: [id])
  createdAt   DateTime        @default(now())

  @@map("QuestionTag")
  @@id([questionId, tagId])
  @@index([tagId], name: "idx_questiontag_tag_id")
  @@index([batchId])
}

model QuestionAccess {
  id          String    @id @default(cuid())
  questionId  String
  userId      String
  accessType  AccessType
  question    Question  @relation(fields: [questionId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([questionId, userId])
  @@map("QuestionAccess")
}