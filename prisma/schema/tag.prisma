enum TagType {
  Category
  SubCategory
  University
  Region
  Department
  Course
  Topic
  UserFolder
  Organization
  Certification
  Module
}

enum ContentRatingType {
  Everyone
  Everyone10
  Teen
  Mature
  AdultsOnly
  RatingPending
}

enum ContextType {
  Colleges
  Certifications
}

model Tag {
  id                  String                @id @default(cuid())
  batchId             String?
  batch               ImportBatch?           @relation(fields: [batchId], references: [id], onDelete: Cascade)
  hash                String                @unique
  name                String        
  description         String?
  type                TagType
  parentTagId         String?
  parentTag           Tag?                  @relation("ParentChild", fields: [parentTagId], references: [id])
  childTags           Tag[]                 @relation("ParentChild")
  questions           QuestionTag[]
  ratings             UserTagRating[]
  testSessions        TestSession[]
  reports             UserTagReport[]
  recentTags          UserTagRecent[]
  favoriteTags        UserTagFavorite[]
  topicProgress       UserTopicProgress[]
  survivalSessions    SurvivalSession[]
  contentRating       ContentRatingType     @default(RatingPending)
  contentDescriptors  String[]              @default([])  
  metaTags            String[]              @default([])  
  public              Boolean               @default(true)
  accessList          TagAccess[]
  accessCount         Int                   @default(0)
  metadata            Json?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@map("Tag")
  @@index([hash], name: "tags_hash_idx")
  @@index([batchId])
  @@index([type, batchId, id])
  @@index([type, contentRating])
  @@index([parentTagId])
  @@index([contentRating, type])
  @@index([metaTags], type: Gin)
  @@index([type, metaTags])
  @@index([type, contentDescriptors])
}

model TagAccess {
  id          String    @id @default(cuid())
  tagId       String
  userId      String
  accessType  AccessType
  tag         Tag  @relation(fields: [tagId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([tagId, userId])
  @@map("TagAccess")
}

model UserTagFavorite {
  userId        String
  tagId         String    
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag           Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())

  @@index([tagId])
  @@id([userId, tagId])
  @@map("UserTagFavorite")
}

model UserTagRecent {
  userId        String
  tagId         String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag           Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())

  @@id([userId, tagId])
  @@index([tagId])
  @@map("UserTagRecent") 
}